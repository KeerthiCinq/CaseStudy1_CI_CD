name: CICD Pipeline

on:
  push:
    branches: 
      - main
      - qa
      - prod

jobs:
  compile:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile
     

  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: compile
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar 
        

  buils_docker_image_and_push:
    runs-on: self-hosted
    needs: build_project_and_sonar_scan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app  # this will download JAR to ./app folder
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1"

    - name: Log in to Amazon ECR 
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Build Docker image 
      env: 
        IMAGE_TAG: "${{ secrets.SPRINGBOOT_APP_IMAGE }}:bankapp-springboot-image-${{ github.sha }}" 
      run: |
        sudo docker build -t $IMAGE_TAG .

    - name: Push Docker image to ECR 
      env: 
        IMAGE_TAG: "${{ secrets.SPRINGBOOT_APP_IMAGE }}:bankapp-springboot-image-${{ github.sha }}" 
      run: | 
        sudo docker push $IMAGE_TAG


  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: buils_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f ds.yml

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name demo-cluster5--region us-east-1
    - name: Check Kubernetes config
      run: |
        cat ~/.kube/config
        kubectl cluster-info
    - name: Deploy API Gateway with Helm
      run: |
        ClusterEnv=${{ steps.set-env.outputs.env }}
        NAMESPACE=${ClusterEnv}
        kubectl apply -f ds.yml --namespace ${NAMESPACE}
